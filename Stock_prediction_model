import pandas_datareader as data
import pandas as pd
import yfinance as yf
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from keras.models import load_model
import streamlit as st

end_date=datetime.today().date()
start_date= (end_date - pd.DateOffset(years=10)).date()

st.title('Stock Trend Prediction')
user_input=st.text_input('Enter Stock Ticker','AAPL')

df= yf.download('AAPL',start_date,end_date)
#describing the data
st.subheader('Data from 2015-2025')
st.write(df.describe())
df= df.reset_index()
df=df.drop(['Date'],axis=1)

ma100=df.Close.rolling(100).mean()

#splitting data into training and testing

data_training=pd.DataFrame(df['Close'][0:int(len(df)*0.70)])
data_testing=pd.DataFrame(df['Close'][int(len(df)*0.70):int(len(df))])

scaler=MinMaxScaler(feature_range=(0,1))

data_training_array=scaler.fit_transform(data_training)

x_train=[]
y_train=[]

for i in range(100,data_training_array.shape[0]):
  x_train.append(data_training_array[i-100:i])
  y_train.append(data_training_array[i,0])

x_train,y_train=np.array(x_train),np.array(y_train)

#ML model
from keras.layers import Dense,Dropout,LSTM
from keras.models import Sequential

model=Sequential()
model.add(LSTM(units=50,activation='relu',return_sequences=True,input_shape=(x_train.shape[1],1)))
model.add(Dropout(0.2))

model.add(LSTM(units=60,activation='relu',return_sequences=True))
model.add(Dropout(0.3))

model.add(LSTM(units=80,activation='relu',return_sequences=True))
model.add(Dropout(0.4))

model.add(LSTM(units=120,activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(units=1))

model.compile(optimizer='adam',loss='mean_squared_error')
model.fit(x_train,y_train,epochs=10)

model.save('my_model.keras')

past_100_days=data_training.tail(100)
final_df=pd.concat([past_100_days, data_testing], ignore_index=True)

input_data=scaler.fit_transform(final_df)

x_test=[]
y_test=[]

for i in range(100,input_data.shape[0]):
  x_test.append(input_data[i-100:i])
  y_test.append(input_data[i,0])
  
x_test,y_test=np.array(x_test),np.array(y_test)

#making prediction

y_predicted=model.predict(x_test)

scale_factor=1/0.00741717
y_predicted=y_predicted*scale_factor
y_test=y_test*scale_factor








